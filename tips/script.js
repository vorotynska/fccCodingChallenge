// –°—Ç—Ä–æ—á–Ω—ã–µ
const lowercase = Array.from({
    length: 26
}, (_, i) => String.fromCharCode(97 + i));

// –ó–∞–≥–ª–∞–≤–Ω—ã–µ
const uppercase = Array.from({
    length: 26
}, (_, i) => String.fromCharCode(65 + i));

console.log(lowercase);
console.log(uppercase);

console.log("A".charCodeAt(0)); // 65
console.log("a".charCodeAt(0)); // 97
console.log("Z".charCodeAt(0)); // 90
console.log("z".charCodeAt(0)); // 122

// 0‚Äì9 ‚Üí charCodeAt() - 48 (—Ç.–∫. '0' –∏–º–µ–µ—Ç –∫–æ–¥ 48).

// A‚ÄìZ ‚Üí charCodeAt() - 65 + 10 (—Ç.–∫. 'A' ‚Üí 10, 'B' ‚Üí 11 –∏ —Ç.–¥.).

// ---------------------------------------------------------

// 1. –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –º–∞—Å—Å–∏–≤–∞
const arr = [1, 2, 2, 3, 4, 4, 5];

// –°–ø–æ—Å–æ–± 1 ‚Äî —á–µ—Ä–µ–∑ Set
const unique = [...new Set(arr)];
console.log(unique); // [1, 2, 3, 4, 5]

// –°–ø–æ—Å–æ–± 2 ‚Äî —á–µ—Ä–µ–∑ filter
const unique2 = arr.filter((el, i) => arr.indexOf(el) === i);
console.log(unique2); // [1, 2, 3, 4, 5]

// 2. –ù–∞–π—Ç–∏ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —ç–ª–µ–º–µ–Ω—Ç—ã
const arr1 = [1, 2, 2, 3, 4, 4, 5];

const duplicates = arr1.filter((el, i) => arr1.indexOf(el) !== i);
console.log([...new Set(duplicates)]); // [2, 4]

// 3. –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–æ–≤ (—á—Ç–æ –µ—Å—Ç—å –∏ —Ç–∞–º, –∏ —Ç–∞–º)
const aa = [1, 2, 3, 4];
const bb = [3, 4, 5, 6];

const intersection = aa.filter(el => bb.includes(el));
console.log(intersection); // [3, 4]

// 4. –†–∞–∑–Ω–æ—Å—Ç—å –º–∞—Å—Å–∏–≤–æ–≤ (—á—Ç–æ –µ—Å—Ç—å –≤ a, –Ω–æ –Ω–µ—Ç –≤ b)
const a = [1, 2, 3, 4];
const b = [3, 4, 5, 6];

const difference = a.filter(el => !b.includes(el));
console.log(difference); // [1, 2]

// 5. –°–∏–º–º–µ—Ç—Ä–∏—á–µ—Å–∫–∞—è —Ä–∞–∑–Ω–æ—Å—Ç—å (—Ç–æ–ª—å–∫–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–∑ –æ–±–æ–∏—Ö –º–∞—Å—Å–∏–≤–æ–≤)
const aaa = [1, 2, 3, 4];
const bbb = [3, 4, 5, 6];

const symmetricDiff = [...aaa.filter(el => !bbb.includes(el)),
    ...bbb.filter(el => !aaa.includes(el))
];
console.log(symmetricDiff); // [1, 2, 5, 6]

// --------------------------------------
//–í JavaScript —É –ª—é–±–æ–≥–æ —á–∏—Å–ª–∞ –µ—Å—Ç—å –º–µ—Ç–æ–¥ .toString(radix), –≥–¥–µ radix ‚Äî —ç—Ç–æ —Å–∏—Å—Ç–µ–º–∞ —Å—á–∏—Å–ª–µ–Ω–∏—è. –î–ª—è hex –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è 16.

//–ü—Ä–∏–º–µ—Ä:

let num = 255;
console.log(num.toString(16)); // "ff"


//‚ö†Ô∏è –ù–æ –µ—Å—Ç—å –Ω—é–∞–Ω—Å: –∏–Ω–æ–≥–¥–∞ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ 16, –Ω–∞–ø—Ä–∏–º–µ—Ä 5.

let num1 = 5;
console.log(num.toString(16)); // "5"


//–ê –Ω–∞–º –Ω—É–∂–Ω–æ –¥–≤–µ —Ü–∏—Ñ—Ä—ã ("05"), –∏–Ω–∞—á–µ hex-–∫–æ–¥ –ø–æ–ª—É—á–∏—Ç—Å—è –∫—Ä–∏–≤—ã–º.
//üëâ –†–µ—à–∞–µ—Ç—Å—è –º–µ—Ç–æ–¥–æ–º .padStart(2, "0"):

function toHex(num) {
    return num.toString(16).padStart(2, "0");
}

console.log(toHex(255)); // "ff"
console.log(toHex(5)); // "05"


//–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Å–æ–±–∏—Ä–∞—Ç—å hex-—Ü–≤–µ—Ç:

function rgbToHex(r, g, b) {
    return "#" + toHex(r) + toHex(g) + toHex(b);
}

console.log(rgbToHex(255, 0, 0)); // "#ff0000"
console.log(rgbToHex(0, 255, 0)); // "#00ff00"
console.log(rgbToHex(0, 0, 255)); // "#0000ff"